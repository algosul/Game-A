name: release
on:
  push:
    tags:
      - 'v*.*.*'
env:
  CARGO_TERM_COLOR: always
  BIN_NAME: "Error-Reboot"
jobs:
  build:
    permissions:
      contents: write
    strategy:
      matrix:
        platform: [ ubuntu-latest, macos-latest, windows-latest ]
        include:
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: x86_64-linux.tar.gz
          - platform: macos-latest
            target: x86_64-apple-darwin
            suffix: x86_64-macos.tar.gz
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: x86_64-windows.7z
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Get Tag Name
        id: tagName
        uses: olegtarasov/get-tag@v2.1.4

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: ${{ matrix.target }}
          profile: complete
          override: true
          components: rustfmt, clippy

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}[1](@ref)

      - name: Cache APT packages
        if: matrix.platform == 'ubuntu-latest'
        id: cache-apt
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('**/dependencies.hash') }}
          restore-keys: |
            ${{ runner.os }}-apt
      - name: Generate dependencies hash
        if: matrix.platform == 'ubuntu-latest' && steps.cache-apt.outputs.cache-hit != 'true'
        run: |
          echo "libasound2-dev alsa-utils" > dependencies.list
          sha256sum dependencies.list > dependencies.hash

      - name: Install ALSA libraries
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libasound2-dev alsa-utils

      - name: Run fmt check
        run: cargo fmt -- --check

      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy

      - uses: actions-rs/cargo@v1
        with:
          command: test

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --all-features
      - name: Build Release
        shell: bash
        run: |
          mkdir -p dist temp
          cp -r README.md ./docs temp/
          cd temp
          version="${{ steps.tagName.outputs.tag }}"
          if [ "${{ matrix.build }}" = "windows" ]; then
            cp "../target/release/${{ env.BIN_NAME }}.exe" ./
            7z a -r "../dist/${{ env.BIN_NAME }}-$version-${{ matrix.release-file-suffix }}" *
          else
            cp "../target/release/${{ env.BIN_NAME }}" ./
            tar czf "../dist/${{ env.BIN_NAME }}-$version-${{ matrix.release-file-suffix }}" *
          fi
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ steps.tagName.outputs.tag }}
          name: ${{ steps.changelog.outputs.title }}
          draft: false
          prerelease: false
          body: ${{ steps.changelog.outputs.body }}
          files: "dist/**"
